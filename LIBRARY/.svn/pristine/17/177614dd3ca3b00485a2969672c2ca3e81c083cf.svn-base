package com.kh.library.member.controller;

import java.security.SecureRandom;

import javax.annotation.Resource;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kh.library.member.service.MemberService;
import com.kh.library.member.vo.MemberVO;

@Controller
@RequestMapping("/member")
public class MemberController {
	@Resource(name = "memberService")
	private MemberService memberService;
	
	@Autowired
	private JavaMailSender mailSender;
	
	//--------------회원가입---------------
	//회원가입창 이동
	@GetMapping("/join")
	public String joinForm() {
		return "member/join_form";
	}
	//아이디 중복 체크
	@ResponseBody
	@PostMapping("/checkId")
	public int checkId(String memId) {
		return memberService.checkId(memId);
	}
	//가입
	@PostMapping("/join")
	public String join(MemberVO memberVO) {
		memberVO.setMemTell(memberVO.getMemTell().replace(",", "-"));
		memberVO.setMemAddr(memberVO.getMemAddr().replace(",", " "));
		memberVO.setMemEmail(memberVO.getMemEmail().replace(",", "@"));
		memberService.joinMember(memberVO);
		return "member/join_result";
	}
	
	//----------------로그인-----------------
	//로그인창 이동
	@GetMapping("/login")
	public String loginForm() {
		return "member/login_form";
	}
	//로그인
	@ResponseBody
	@PostMapping("/login")
	public int login(MemberVO memberVO, HttpSession session) {
		MemberVO loginMem = memberService.login(memberVO);
		int result = 1;
		if(loginMem != null) {
			session.setAttribute("loginInfo", loginMem);
			result = 0;
		}
		return result; //메인 화면 경로 정하기
	}
	//로그아웃
	@GetMapping("/logout")
	public String logout(HttpSession session) {
		session.removeAttribute("loginInfo");
		return "redirect:/admin/test";
	}
	
	//아이디 찾기
	@GetMapping("/findId")
	public String findIdForm() {
		return "find/find_id";
	}
	@ResponseBody
	@PostMapping("/findId")
	public String findInd(MemberVO memberVO) {
		String result = memberService.findId(memberVO);
		System.out.println(result);
		return result;
	}
	//비밀번호 찾기
	@GetMapping("/findPwd")
	public String findPwdForm() {
		return "find/find_pwd";
	}
	
	@ResponseBody
	@PostMapping("/findPwd")
	public void findPwd(MemberVO memberVO) {
		//임시 비번 보낼 이메일 조회
		String memEmail = memberService.selectEmail(memberVO);
		//임시 비밀번호 생성 소문자 + 대문자 + 숫자 포함 8자리
		String tempPwd = getTempPwd();
		memberVO.setMemPwd(tempPwd);
		memberService.updateTempPwd(memberVO);			
		try {
			MimeMessage message = mailSender.createMimeMessage();
			MimeMessageHelper messageHelper;
			messageHelper = new MimeMessageHelper(message, true, "UTF-8");
			messageHelper.setFrom("surfurlove@gmail.com");
			messageHelper.setTo(memEmail);
			messageHelper.setSubject("임시 비밀번호");
			messageHelper.setText("임시 비밀번호는  " + tempPwd + "  입니다. 로그인 후 새비밀번호로 변경해주세요.");
			mailSender.send(message);
			
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}
	//---------------마이페이지---------------

	//내 정보 상세조회 이동
	@GetMapping("/myPageDetail")
	public String myPageDetail(Model model, String memId) {
		model.addAttribute("memberInfo", memberService.selectMyPageDetail(memId));
		return "mypage/my_page_detail";
	}
	
	//대출 리스트 상세
	@GetMapping("/reserveListDetail")
	public String reserveListDetail() {
		return "member/reserveList_detail";
	}
	
	//구매 목록 상세
	
	
	
	
	
	//대소문자 + 숫자 포함 8자리 문자열 생성 및 리턴
	public String getTempPwd() {
		String lowerCase = "abcdefghijklmnopqrstuvwxyz";
		String upperCase = lowerCase.toUpperCase();
		String num = "0123456789";
		String baseStr = lowerCase + upperCase + num;
		
		StringBuilder tempPwd = new StringBuilder();
		for(int i = 0 ; i < 8 ; i++) {
			SecureRandom random = new SecureRandom();
			int index = random.nextInt(baseStr.length());
			char c = baseStr.charAt(index);
			tempPwd.append(String.valueOf(c));
		}
		return tempPwd.toString();
	}
}
